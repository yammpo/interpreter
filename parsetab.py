
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD_END ADD_START AND_END AND_START ASSIGN_END ASSIGN_START BOOL CALL_END CALL_START CELL CHECK_END CHECK_START CONDITION_END CONDITION_START CONST COUNT DIMENSIONS_END DIMENSIONS_START DIMENSION_END DIMENSION_START DIM_END DIM_START DIV_END DIV_START DOWN_END DOWN_START DO_END DO_START EMPTY EQUALSIGN EQ_END EQ_START EXIT FALSE FUNC_END FUNC_START GETDRONSCOUNT_END GETDRONSCOUNT_START ID INDEX_END INDEX_START INT LBRACKET LEFT_END LEFT_START MAIN MAX_END MAX_START MIN_END MIN_START MUL_END MUL_START NAME NOT_END NOT_START NUMBER OR_END OR_START PROGRAM_END PROGRAM_START RBRACKET RIGHT_END RIGHT_START SENDDRONS_END SENDDRONS_START SUB_END SUB_START SWITCH_END SWITCH_START TO_END TO_START TRUE TYPE_END TYPE_START UNDEF UP_END UP_START VALUES_END VALUES_START VALUE_END VALUE_START VARDECLARATION_END VARDECLARATION_START VAR_END VAR_START WALL WHILE_END WHILE_STARTprogram : PROGRAM_START blocks PROGRAM_ENDblocks : blocks block\n\t\t| blockblock : vardeclaration\n\t\t| function\n\t\t| emptyblock : errorfunction : FUNC_START NAME EQUALSIGN funcname RBRACKET statements FUNC_ENDstatements : statements statement\n\t\t| statementstatement : vardeclaration\n\t\t| assignment \n\t\t| while\n\t\t| switch\n\t\t| call\n\t\t| operator\n\t\t| emptystatement : errorassignment : ASSIGN_START VALUE_START expression VALUE_END TO_START variables TO_END ASSIGN_ENDwhile : WHILE_START CHECK_START expression CHECK_END DO_START statements DO_END WHILE_ENDswitch : SWITCH_START conditions SWITCH_ENDconditions : conditions condition\n\t\t| conditioncondition : CONDITION_START CHECK_START expression CHECK_END DO_START statements DO_END CONDITION_END\n\t\t| emptycondition : errorcall : CALL_START funcname CALL_ENDfuncname : ID\n\t\t| MAINvardeclaration : VARDECLARATION_START declarations VARDECLARATION_ENDdeclarations : declarations declaration\n\t\t| declarationdeclaration : declaration_var\n\t\t| declaration_var_init\n\t\t| declaration_var_const\n\t\t| declaration_array\n\t\t| declaration_array_init\n\t\t| declaration_array_const\n\t\t| emptydeclaration_var : VAR_START EQUALSIGN id RBRACKET TYPE_START type TYPE_END LBRACKET VAR_END\n\t\t| VAR_START EQUALSIGN id CONST EQUALSIGN FALSE RBRACKET TYPE_START type TYPE_END LBRACKET VAR_ENDdeclaration_var_const : VAR_START EQUALSIGN id CONST EQUALSIGN TRUE RBRACKET TYPE_START type TYPE_END VALUE_START expression VALUE_END LBRACKET VAR_ENDdeclaration_var_init : VAR_START EQUALSIGN id RBRACKET TYPE_START type TYPE_END VALUE_START expression VALUE_END LBRACKET VAR_END\n\t\t| VAR_START EQUALSIGN id CONST EQUALSIGN FALSE RBRACKET TYPE_START type TYPE_END VALUE_START expression VALUE_END LBRACKET VAR_ENDdeclaration_array : VAR_START EQUALSIGN id RBRACKET TYPE_START type TYPE_END DIMENSIONS_START COUNT EQUALSIGN const RBRACKET dimensions DIMENSIONS_END LBRACKET VAR_END\n\t\t| VAR_START EQUALSIGN id CONST EQUALSIGN FALSE RBRACKET TYPE_START type TYPE_END DIMENSIONS_START COUNT EQUALSIGN const RBRACKET dimensions DIMENSIONS_END LBRACKET VAR_ENDdeclaration_array_init : VAR_START EQUALSIGN id RBRACKET TYPE_START type TYPE_END DIMENSIONS_START COUNT EQUALSIGN const RBRACKET dimensions DIMENSIONS_END VALUES_START values VALUES_END LBRACKET VAR_END\n\t\t| VAR_START EQUALSIGN id CONST EQUALSIGN FALSE RBRACKET TYPE_START type TYPE_END DIMENSIONS_START COUNT EQUALSIGN const RBRACKET dimensions DIMENSIONS_END VALUES_START values VALUES_END LBRACKET VAR_ENDdeclaration_array_const : VAR_START EQUALSIGN id CONST EQUALSIGN TRUE RBRACKET TYPE_START type TYPE_END DIMENSIONS_START COUNT EQUALSIGN const RBRACKET dimensions DIMENSIONS_END VALUES_START values VALUES_END LBRACKET VAR_ENDvalues : values value\n\t\t| valuevalue : VALUE_START expression VALUE_ENDdimensions : dimensions dimension\n\t\t| dimensiondimension : DIMENSION_START expression DIMENSION_ENDtype : INT\n\t\t| CELL\n\t\t| BOOLid : IDvariables : variables variable\n\t\t| variablevariable : VAR_START NAME EQUALSIGN id VAR_END\n\t\t| VAR_START NAME EQUALSIGN id RBRACKET DIM_START indexes DIM_END LBRACKET VAR_END\n\t\t| emptyindexes : indexes index\n\t\t| indexindex : INDEX_START expression INDEX_ENDexpressions : expressions expression\n\t\t| expressionexpression : variable\n\t\t| const\n\t\t| math\n\t\t| empty\n\t\t| senddronsconst : TRUE\n\t\t| FALSE\n\t\t| NUMBER\n\t\t| EMPTY\n\t\t| WALL\n\t\t| EXIT\n\t\t| UNDEFmath : ADD_START expressions ADD_END\n\t\t| MUL_START expressions MUL_END\n\t\t| SUB_START expressions SUB_END\n\t\t| DIV_START expressions DIV_END\n\t\t| OR_START expressions OR_END\n\t\t| AND_START expressions AND_END\n\t\t| MAX_START expressions MAX_END\n\t\t| MIN_START expressions MIN_END\n\t\t| EQ_START expressions EQ_END\n\t\t| NOT_START expression NOT_ENDsenddrons : SENDDRONS_START expression SENDDRONS_ENDoperator : LEFT_START expression LEFT_END\n\t\t| RIGHT_START expression RIGHT_END\n\t\t| UP_START expression UP_END\n\t\t| DOWN_START expression DOWN_END\n\t\t| GETDRONSCOUNT_START variable GETDRONSCOUNT_ENDempty : '
    
_lr_action_items = {'PROGRAM_START':([0,],[2,]),'$end':([1,11,],[0,-1,]),'error':([2,3,4,5,6,7,8,12,24,35,38,39,40,41,42,43,44,45,46,47,50,63,64,67,68,70,71,108,109,111,112,126,127,128,129,157,166,167,180,189,190,202,],[8,8,-3,-4,-5,-6,-7,-2,-30,47,47,-10,-11,-12,-13,-14,-15,-16,-17,-18,71,-8,-9,71,-23,-25,-26,-21,-22,-27,-93,-94,-95,-96,-97,47,47,47,47,-19,-20,-24,]),'VARDECLARATION_START':([2,3,4,5,6,7,8,12,24,35,38,39,40,41,42,43,44,45,46,47,63,64,108,111,112,126,127,128,129,157,166,167,180,189,190,],[9,9,-3,-4,-5,-6,-7,-2,-30,9,9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-8,-9,-21,-27,-93,-94,-95,-96,-97,9,9,9,9,-19,-20,]),'FUNC_START':([2,3,4,5,6,7,8,12,24,63,],[10,10,-3,-4,-5,-6,-7,-2,-30,-8,]),'PROGRAM_END':([2,3,4,5,6,7,8,12,24,63,],[-98,11,-3,-4,-5,-6,-7,-2,-30,-8,]),'VAR_START':([9,13,14,15,16,17,18,19,20,21,25,52,53,54,55,56,65,66,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,102,110,114,115,116,117,118,119,120,121,122,123,131,139,140,141,142,143,144,145,146,147,148,149,150,151,156,164,165,168,173,175,178,182,184,194,197,218,220,222,223,226,239,240,247,248,],[22,22,-32,-33,-34,-35,-36,-37,-38,-39,-31,79,79,79,79,79,79,79,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,79,79,79,79,79,79,79,79,79,79,79,-64,79,79,-69,79,79,79,79,79,79,79,79,79,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-40,79,79,-61,-62,79,79,-60,-43,-41,79,79,-44,-42,-63,-45,79,-47,-46,-48,-49,]),'VARDECLARATION_END':([9,13,14,15,16,17,18,19,20,21,25,151,182,184,218,220,223,239,240,247,248,],[-98,24,-32,-33,-34,-35,-36,-37,-38,-39,-31,-40,-43,-41,-44,-42,-45,-47,-46,-48,-49,]),'NAME':([10,79,],[23,113,]),'EQUALSIGN':([22,23,34,113,153,186,188,],[26,27,37,138,161,199,201,]),'FUNC_END':([24,35,38,39,40,41,42,43,44,45,46,47,64,108,111,112,126,127,128,129,189,190,],[-30,-98,63,-10,-11,-12,-13,-14,-15,-16,-17,-18,-9,-21,-27,-93,-94,-95,-96,-97,-19,-20,]),'ASSIGN_START':([24,35,38,39,40,41,42,43,44,45,46,47,64,108,111,112,126,127,128,129,157,166,167,180,189,190,],[-30,48,48,-10,-11,-12,-13,-14,-15,-16,-17,-18,-9,-21,-27,-93,-94,-95,-96,-97,48,48,48,48,-19,-20,]),'WHILE_START':([24,35,38,39,40,41,42,43,44,45,46,47,64,108,111,112,126,127,128,129,157,166,167,180,189,190,],[-30,49,49,-10,-11,-12,-13,-14,-15,-16,-17,-18,-9,-21,-27,-93,-94,-95,-96,-97,49,49,49,49,-19,-20,]),'SWITCH_START':([24,35,38,39,40,41,42,43,44,45,46,47,64,108,111,112,126,127,128,129,157,166,167,180,189,190,],[-30,50,50,-10,-11,-12,-13,-14,-15,-16,-17,-18,-9,-21,-27,-93,-94,-95,-96,-97,50,50,50,50,-19,-20,]),'CALL_START':([24,35,38,39,40,41,42,43,44,45,46,47,64,108,111,112,126,127,128,129,157,166,167,180,189,190,],[-30,51,51,-10,-11,-12,-13,-14,-15,-16,-17,-18,-9,-21,-27,-93,-94,-95,-96,-97,51,51,51,51,-19,-20,]),'LEFT_START':([24,35,38,39,40,41,42,43,44,45,46,47,64,108,111,112,126,127,128,129,157,166,167,180,189,190,],[-30,52,52,-10,-11,-12,-13,-14,-15,-16,-17,-18,-9,-21,-27,-93,-94,-95,-96,-97,52,52,52,52,-19,-20,]),'RIGHT_START':([24,35,38,39,40,41,42,43,44,45,46,47,64,108,111,112,126,127,128,129,157,166,167,180,189,190,],[-30,53,53,-10,-11,-12,-13,-14,-15,-16,-17,-18,-9,-21,-27,-93,-94,-95,-96,-97,53,53,53,53,-19,-20,]),'UP_START':([24,35,38,39,40,41,42,43,44,45,46,47,64,108,111,112,126,127,128,129,157,166,167,180,189,190,],[-30,54,54,-10,-11,-12,-13,-14,-15,-16,-17,-18,-9,-21,-27,-93,-94,-95,-96,-97,54,54,54,54,-19,-20,]),'DOWN_START':([24,35,38,39,40,41,42,43,44,45,46,47,64,108,111,112,126,127,128,129,157,166,167,180,189,190,],[-30,55,55,-10,-11,-12,-13,-14,-15,-16,-17,-18,-9,-21,-27,-93,-94,-95,-96,-97,55,55,55,55,-19,-20,]),'GETDRONSCOUNT_START':([24,35,38,39,40,41,42,43,44,45,46,47,64,108,111,112,126,127,128,129,157,166,167,180,189,190,],[-30,56,56,-10,-11,-12,-13,-14,-15,-16,-17,-18,-9,-21,-27,-93,-94,-95,-96,-97,56,56,56,56,-19,-20,]),'DO_END':([24,39,40,41,42,43,44,45,46,47,64,108,111,112,126,127,128,129,157,166,167,180,189,190,],[-30,-10,-11,-12,-13,-14,-15,-16,-17,-18,-9,-21,-27,-93,-94,-95,-96,-97,-98,179,-98,191,-19,-20,]),'ID':([26,27,51,138,],[29,31,31,29,]),'MAIN':([27,51,],[32,32,]),'RBRACKET':([28,29,30,31,32,61,62,80,81,82,83,84,85,86,159,171,210,212,],[33,-59,35,-28,-29,104,105,-75,-76,-77,-78,-79,-80,-81,169,183,219,221,]),'CONST':([28,29,],[34,-59,]),'VAR_END':([29,130,159,170,172,209,211,213,215,234,236,245,246,],[-59,151,168,182,184,218,220,222,223,239,240,247,248,]),'CALL_END':([31,32,72,],[-28,-29,111,]),'TYPE_START':([33,104,105,],[36,133,134,]),'INT':([36,133,134,],[58,58,58,]),'CELL':([36,133,134,],[59,59,59,]),'BOOL':([36,133,134,],[60,60,60,]),'FALSE':([37,52,53,54,55,65,66,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,110,114,115,116,117,118,119,120,121,122,123,131,139,140,141,142,143,144,145,146,147,148,149,150,161,168,173,175,194,197,199,201,222,226,],[61,81,81,81,81,81,81,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,81,81,81,81,81,81,81,81,81,81,81,81,81,-69,81,81,81,81,81,81,81,81,81,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,81,-62,81,81,81,81,81,81,-63,81,]),'TRUE':([37,52,53,54,55,65,66,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,110,114,115,116,117,118,119,120,121,122,123,131,139,140,141,142,143,144,145,146,147,148,149,150,161,168,173,175,194,197,199,201,222,226,],[62,80,80,80,80,80,80,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,80,80,80,80,80,80,80,80,80,80,80,80,80,-69,80,80,80,80,80,80,80,80,80,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,80,-62,80,80,80,80,80,80,-63,80,]),'VALUE_START':([48,103,162,163,216,224,225,230,235,237,238,241,242,],[65,131,173,175,226,226,-51,-50,-52,226,226,226,226,]),'CHECK_START':([49,69,],[66,110,]),'CONDITION_START':([50,67,68,70,71,109,202,],[69,69,-23,-25,-26,-22,-24,]),'SWITCH_END':([50,67,68,70,71,109,202,],[-98,108,-23,-25,-26,-22,-24,]),'NUMBER':([52,53,54,55,65,66,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,110,114,115,116,117,118,119,120,121,122,123,131,139,140,141,142,143,144,145,146,147,148,149,150,161,168,173,175,194,197,199,201,222,226,],[82,82,82,82,82,82,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,82,82,82,82,82,82,82,82,82,82,82,82,82,-69,82,82,82,82,82,82,82,82,82,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,82,-62,82,82,82,82,82,82,-63,82,]),'EMPTY':([52,53,54,55,65,66,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,110,114,115,116,117,118,119,120,121,122,123,131,139,140,141,142,143,144,145,146,147,148,149,150,161,168,173,175,194,197,199,201,222,226,],[83,83,83,83,83,83,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,83,83,83,83,83,83,83,83,83,83,83,83,83,-69,83,83,83,83,83,83,83,83,83,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,83,-62,83,83,83,83,83,83,-63,83,]),'WALL':([52,53,54,55,65,66,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,110,114,115,116,117,118,119,120,121,122,123,131,139,140,141,142,143,144,145,146,147,148,149,150,161,168,173,175,194,197,199,201,222,226,],[84,84,84,84,84,84,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,84,84,84,84,84,84,84,84,84,84,84,84,84,-69,84,84,84,84,84,84,84,84,84,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,84,-62,84,84,84,84,84,84,-63,84,]),'EXIT':([52,53,54,55,65,66,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,110,114,115,116,117,118,119,120,121,122,123,131,139,140,141,142,143,144,145,146,147,148,149,150,161,168,173,175,194,197,199,201,222,226,],[85,85,85,85,85,85,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,85,85,85,85,85,85,85,85,85,85,85,85,85,-69,85,85,85,85,85,85,85,85,85,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,85,-62,85,85,85,85,85,85,-63,85,]),'UNDEF':([52,53,54,55,65,66,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,110,114,115,116,117,118,119,120,121,122,123,131,139,140,141,142,143,144,145,146,147,148,149,150,161,168,173,175,194,197,199,201,222,226,],[86,86,86,86,86,86,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,86,86,86,86,86,86,86,86,86,86,86,86,86,-69,86,86,86,86,86,86,86,86,86,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,86,-62,86,86,86,86,86,86,-63,86,]),'ADD_START':([52,53,54,55,65,66,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,110,114,115,116,117,118,119,120,121,122,123,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[87,87,87,87,87,87,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,87,87,87,87,87,87,87,87,87,87,87,87,87,-69,87,87,87,87,87,87,87,87,87,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,87,87,87,87,-63,87,]),'MUL_START':([52,53,54,55,65,66,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,110,114,115,116,117,118,119,120,121,122,123,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[88,88,88,88,88,88,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,88,88,88,88,88,88,88,88,88,88,88,88,88,-69,88,88,88,88,88,88,88,88,88,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,88,88,88,88,-63,88,]),'SUB_START':([52,53,54,55,65,66,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,110,114,115,116,117,118,119,120,121,122,123,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[89,89,89,89,89,89,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,89,89,89,89,89,89,89,89,89,89,89,89,89,-69,89,89,89,89,89,89,89,89,89,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,89,89,89,89,-63,89,]),'DIV_START':([52,53,54,55,65,66,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,110,114,115,116,117,118,119,120,121,122,123,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[90,90,90,90,90,90,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,90,90,90,90,90,90,90,90,90,90,90,90,90,-69,90,90,90,90,90,90,90,90,90,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,90,90,90,90,-63,90,]),'OR_START':([52,53,54,55,65,66,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,110,114,115,116,117,118,119,120,121,122,123,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[91,91,91,91,91,91,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,91,91,91,91,91,91,91,91,91,91,91,91,91,-69,91,91,91,91,91,91,91,91,91,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,91,91,91,91,-63,91,]),'AND_START':([52,53,54,55,65,66,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,110,114,115,116,117,118,119,120,121,122,123,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[92,92,92,92,92,92,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,92,92,92,92,92,92,92,92,92,92,92,92,92,-69,92,92,92,92,92,92,92,92,92,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,92,92,92,92,-63,92,]),'MAX_START':([52,53,54,55,65,66,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,110,114,115,116,117,118,119,120,121,122,123,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[93,93,93,93,93,93,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,93,93,93,93,93,93,93,93,93,93,93,93,93,-69,93,93,93,93,93,93,93,93,93,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,93,93,93,93,-63,93,]),'MIN_START':([52,53,54,55,65,66,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,110,114,115,116,117,118,119,120,121,122,123,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[94,94,94,94,94,94,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,94,94,94,94,94,94,94,94,94,94,94,94,94,-69,94,94,94,94,94,94,94,94,94,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,94,94,94,94,-63,94,]),'EQ_START':([52,53,54,55,65,66,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,110,114,115,116,117,118,119,120,121,122,123,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[95,95,95,95,95,95,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,95,95,95,95,95,95,95,95,95,95,95,95,95,-69,95,95,95,95,95,95,95,95,95,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,95,95,95,95,-63,95,]),'NOT_START':([52,53,54,55,65,66,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,110,114,115,116,117,118,119,120,121,122,123,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[96,96,96,96,96,96,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,96,96,96,96,96,96,96,96,96,96,96,96,96,-69,96,96,96,96,96,96,96,96,96,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,96,96,96,96,-63,96,]),'LEFT_END':([52,73,74,75,76,77,78,80,81,82,83,84,85,86,139,141,142,143,144,145,146,147,148,149,150,168,222,],[-98,112,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,-63,]),'SENDDRONS_START':([52,53,54,55,65,66,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,110,114,115,116,117,118,119,120,121,122,123,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[97,97,97,97,97,97,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,97,97,97,97,97,97,97,97,97,97,97,97,97,-69,97,97,97,97,97,97,97,97,97,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,97,97,97,97,-63,97,]),'RIGHT_END':([53,74,75,76,77,78,80,81,82,83,84,85,86,98,139,141,142,143,144,145,146,147,148,149,150,168,222,],[-98,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,126,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,-63,]),'UP_END':([54,74,75,76,77,78,80,81,82,83,84,85,86,99,139,141,142,143,144,145,146,147,148,149,150,168,222,],[-98,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,127,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,-63,]),'DOWN_END':([55,74,75,76,77,78,80,81,82,83,84,85,86,100,139,141,142,143,144,145,146,147,148,149,150,168,222,],[-98,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,128,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,-63,]),'GETDRONSCOUNT_END':([56,101,102,168,222,],[-98,129,-64,-62,-63,]),'TYPE_END':([57,58,59,60,154,155,],[103,-56,-57,-58,162,163,]),'VALUE_END':([65,74,75,76,77,78,80,81,82,83,84,85,86,106,131,139,141,142,143,144,145,146,147,148,149,150,152,168,173,175,185,187,222,226,231,],[-98,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,135,-98,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,160,-62,-98,-98,198,200,-63,-98,235,]),'CHECK_END':([66,74,75,76,77,78,80,81,82,83,84,85,86,107,110,137,139,141,142,143,144,145,146,147,148,149,150,168,222,],[-98,-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,136,-98,158,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,-63,]),'ADD_END':([74,75,76,77,78,80,81,82,83,84,85,86,87,114,115,139,140,141,142,143,144,145,146,147,148,149,150,168,222,],[-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,-98,139,-69,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,-63,]),'MUL_END':([74,75,76,77,78,80,81,82,83,84,85,86,88,115,116,139,140,141,142,143,144,145,146,147,148,149,150,168,222,],[-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,-98,-69,141,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,-63,]),'SUB_END':([74,75,76,77,78,80,81,82,83,84,85,86,89,115,117,139,140,141,142,143,144,145,146,147,148,149,150,168,222,],[-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,-98,-69,142,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,-63,]),'DIV_END':([74,75,76,77,78,80,81,82,83,84,85,86,90,115,118,139,140,141,142,143,144,145,146,147,148,149,150,168,222,],[-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,-98,-69,143,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,-63,]),'OR_END':([74,75,76,77,78,80,81,82,83,84,85,86,91,115,119,139,140,141,142,143,144,145,146,147,148,149,150,168,222,],[-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,-98,-69,144,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,-63,]),'AND_END':([74,75,76,77,78,80,81,82,83,84,85,86,92,115,120,139,140,141,142,143,144,145,146,147,148,149,150,168,222,],[-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,-98,-69,145,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,-63,]),'MAX_END':([74,75,76,77,78,80,81,82,83,84,85,86,93,115,121,139,140,141,142,143,144,145,146,147,148,149,150,168,222,],[-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,-98,-69,146,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,-63,]),'MIN_END':([74,75,76,77,78,80,81,82,83,84,85,86,94,115,122,139,140,141,142,143,144,145,146,147,148,149,150,168,222,],[-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,-98,-69,147,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,-63,]),'EQ_END':([74,75,76,77,78,80,81,82,83,84,85,86,95,115,123,139,140,141,142,143,144,145,146,147,148,149,150,168,222,],[-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,-98,-69,148,-82,-68,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,-63,]),'NOT_END':([74,75,76,77,78,80,81,82,83,84,85,86,96,124,139,141,142,143,144,145,146,147,148,149,150,168,222,],[-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,-98,149,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,-63,]),'SENDDRONS_END':([74,75,76,77,78,80,81,82,83,84,85,86,97,125,139,141,142,143,144,145,146,147,148,149,150,168,222,],[-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,-98,150,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,-63,]),'INDEX_END':([74,75,76,77,78,80,81,82,83,84,85,86,139,141,142,143,144,145,146,147,148,149,150,168,194,205,222,],[-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,-98,214,-63,]),'DIMENSION_END':([74,75,76,77,78,80,81,82,83,84,85,86,139,141,142,143,144,145,146,147,148,149,150,168,197,208,222,],[-70,-71,-72,-64,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-62,-98,217,-63,]),'TO_END':([102,156,164,165,168,178,222,],[-64,-98,177,-61,-62,-60,-63,]),'LBRACKET':([103,160,162,198,200,203,206,229,232,243,244,],[130,170,172,209,211,213,215,234,236,245,246,]),'DIMENSIONS_START':([103,162,163,],[132,174,176,]),'COUNT':([132,174,176,],[153,186,188,]),'TO_START':([135,],[156,]),'DO_START':([136,158,],[157,167,]),'DIM_START':([169,],[181,]),'ASSIGN_END':([177,],[189,]),'WHILE_END':([179,],[190,]),'INDEX_START':([181,192,193,204,214,],[194,194,-66,-65,-67,]),'DIMENSION_START':([183,195,196,207,217,219,221,227,228,],[197,197,-54,-53,-55,197,197,197,197,]),'CONDITION_END':([191,],[202,]),'DIM_END':([192,193,204,214,],[203,-66,-65,-67,]),'DIMENSIONS_END':([195,196,207,217,227,228,],[206,-54,-53,-55,232,233,]),'VALUES_START':([206,232,233,],[216,237,238,]),'VALUES_END':([224,225,230,235,241,242,],[229,-51,-50,-52,243,244,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'blocks':([2,],[3,]),'block':([2,3,],[4,12,]),'vardeclaration':([2,3,35,38,157,166,167,180,],[5,5,40,40,40,40,40,40,]),'function':([2,3,],[6,6,]),'empty':([2,3,9,13,35,38,50,52,53,54,55,56,65,66,67,87,88,89,90,91,92,93,94,95,96,97,110,114,116,117,118,119,120,121,122,123,131,156,157,164,166,167,173,175,180,194,197,226,],[7,7,21,21,46,46,70,77,77,77,77,102,77,77,70,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,102,46,102,46,46,77,77,46,77,77,77,]),'declarations':([9,],[13,]),'declaration':([9,13,],[14,25,]),'declaration_var':([9,13,],[15,15,]),'declaration_var_init':([9,13,],[16,16,]),'declaration_var_const':([9,13,],[17,17,]),'declaration_array':([9,13,],[18,18,]),'declaration_array_init':([9,13,],[19,19,]),'declaration_array_const':([9,13,],[20,20,]),'id':([26,138,],[28,159,]),'funcname':([27,51,],[30,72,]),'statements':([35,157,167,],[38,166,180,]),'statement':([35,38,157,166,167,180,],[39,64,39,64,39,64,]),'assignment':([35,38,157,166,167,180,],[41,41,41,41,41,41,]),'while':([35,38,157,166,167,180,],[42,42,42,42,42,42,]),'switch':([35,38,157,166,167,180,],[43,43,43,43,43,43,]),'call':([35,38,157,166,167,180,],[44,44,44,44,44,44,]),'operator':([35,38,157,166,167,180,],[45,45,45,45,45,45,]),'type':([36,133,134,],[57,154,155,]),'conditions':([50,],[67,]),'condition':([50,67,],[68,109,]),'expression':([52,53,54,55,65,66,87,88,89,90,91,92,93,94,95,96,97,110,114,116,117,118,119,120,121,122,123,131,173,175,194,197,226,],[73,98,99,100,106,107,115,115,115,115,115,115,115,115,115,124,125,137,140,140,140,140,140,140,140,140,140,152,185,187,205,208,231,]),'variable':([52,53,54,55,56,65,66,87,88,89,90,91,92,93,94,95,96,97,110,114,116,117,118,119,120,121,122,123,131,156,164,173,175,194,197,226,],[74,74,74,74,101,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,165,178,74,74,74,74,74,]),'const':([52,53,54,55,65,66,87,88,89,90,91,92,93,94,95,96,97,110,114,116,117,118,119,120,121,122,123,131,161,173,175,194,197,199,201,226,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,171,75,75,75,75,210,212,75,]),'math':([52,53,54,55,65,66,87,88,89,90,91,92,93,94,95,96,97,110,114,116,117,118,119,120,121,122,123,131,173,175,194,197,226,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'senddrons':([52,53,54,55,65,66,87,88,89,90,91,92,93,94,95,96,97,110,114,116,117,118,119,120,121,122,123,131,173,175,194,197,226,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'expressions':([87,88,89,90,91,92,93,94,95,],[114,116,117,118,119,120,121,122,123,]),'variables':([156,],[164,]),'indexes':([181,],[192,]),'index':([181,192,],[193,204,]),'dimensions':([183,219,221,],[195,227,228,]),'dimension':([183,195,219,221,227,228,],[196,207,196,196,207,207,]),'values':([216,237,238,],[224,241,242,]),'value':([216,224,237,238,241,242,],[225,230,225,225,230,230,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM_START blocks PROGRAM_END','program',3,'p_program','parser.py',55),
  ('blocks -> blocks block','blocks',2,'p_blocks','parser.py',59),
  ('blocks -> block','blocks',1,'p_blocks','parser.py',60),
  ('block -> vardeclaration','block',1,'p_block','parser.py',67),
  ('block -> function','block',1,'p_block','parser.py',68),
  ('block -> empty','block',1,'p_block','parser.py',69),
  ('block -> error','block',1,'p_block_error','parser.py',73),
  ('function -> FUNC_START NAME EQUALSIGN funcname RBRACKET statements FUNC_END','function',7,'p_function','parser.py',81),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',85),
  ('statements -> statement','statements',1,'p_statements','parser.py',86),
  ('statement -> vardeclaration','statement',1,'p_statement','parser.py',93),
  ('statement -> assignment','statement',1,'p_statement','parser.py',94),
  ('statement -> while','statement',1,'p_statement','parser.py',95),
  ('statement -> switch','statement',1,'p_statement','parser.py',96),
  ('statement -> call','statement',1,'p_statement','parser.py',97),
  ('statement -> operator','statement',1,'p_statement','parser.py',98),
  ('statement -> empty','statement',1,'p_statement','parser.py',99),
  ('statement -> error','statement',1,'p_statement_error','parser.py',103),
  ('assignment -> ASSIGN_START VALUE_START expression VALUE_END TO_START variables TO_END ASSIGN_END','assignment',8,'p_assignment','parser.py',111),
  ('while -> WHILE_START CHECK_START expression CHECK_END DO_START statements DO_END WHILE_END','while',8,'p_while','parser.py',115),
  ('switch -> SWITCH_START conditions SWITCH_END','switch',3,'p_switch','parser.py',119),
  ('conditions -> conditions condition','conditions',2,'p_conditions','parser.py',123),
  ('conditions -> condition','conditions',1,'p_conditions','parser.py',124),
  ('condition -> CONDITION_START CHECK_START expression CHECK_END DO_START statements DO_END CONDITION_END','condition',8,'p_condition','parser.py',131),
  ('condition -> empty','condition',1,'p_condition','parser.py',132),
  ('condition -> error','condition',1,'p_condition_error','parser.py',139),
  ('call -> CALL_START funcname CALL_END','call',3,'p_call','parser.py',147),
  ('funcname -> ID','funcname',1,'p_funcname','parser.py',151),
  ('funcname -> MAIN','funcname',1,'p_funcname','parser.py',152),
  ('vardeclaration -> VARDECLARATION_START declarations VARDECLARATION_END','vardeclaration',3,'p_vardeclaration','parser.py',156),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','parser.py',160),
  ('declarations -> declaration','declarations',1,'p_declarations','parser.py',161),
  ('declaration -> declaration_var','declaration',1,'p_declaration','parser.py',168),
  ('declaration -> declaration_var_init','declaration',1,'p_declaration','parser.py',169),
  ('declaration -> declaration_var_const','declaration',1,'p_declaration','parser.py',170),
  ('declaration -> declaration_array','declaration',1,'p_declaration','parser.py',171),
  ('declaration -> declaration_array_init','declaration',1,'p_declaration','parser.py',172),
  ('declaration -> declaration_array_const','declaration',1,'p_declaration','parser.py',173),
  ('declaration -> empty','declaration',1,'p_declaration','parser.py',174),
  ('declaration_var -> VAR_START EQUALSIGN id RBRACKET TYPE_START type TYPE_END LBRACKET VAR_END','declaration_var',9,'p_declaration_var','parser.py',178),
  ('declaration_var -> VAR_START EQUALSIGN id CONST EQUALSIGN FALSE RBRACKET TYPE_START type TYPE_END LBRACKET VAR_END','declaration_var',12,'p_declaration_var','parser.py',179),
  ('declaration_var_const -> VAR_START EQUALSIGN id CONST EQUALSIGN TRUE RBRACKET TYPE_START type TYPE_END VALUE_START expression VALUE_END LBRACKET VAR_END','declaration_var_const',15,'p_declaration_var_const','parser.py',183),
  ('declaration_var_init -> VAR_START EQUALSIGN id RBRACKET TYPE_START type TYPE_END VALUE_START expression VALUE_END LBRACKET VAR_END','declaration_var_init',12,'p_declaration_var_init','parser.py',187),
  ('declaration_var_init -> VAR_START EQUALSIGN id CONST EQUALSIGN FALSE RBRACKET TYPE_START type TYPE_END VALUE_START expression VALUE_END LBRACKET VAR_END','declaration_var_init',15,'p_declaration_var_init','parser.py',188),
  ('declaration_array -> VAR_START EQUALSIGN id RBRACKET TYPE_START type TYPE_END DIMENSIONS_START COUNT EQUALSIGN const RBRACKET dimensions DIMENSIONS_END LBRACKET VAR_END','declaration_array',16,'p_declaration_array','parser.py',192),
  ('declaration_array -> VAR_START EQUALSIGN id CONST EQUALSIGN FALSE RBRACKET TYPE_START type TYPE_END DIMENSIONS_START COUNT EQUALSIGN const RBRACKET dimensions DIMENSIONS_END LBRACKET VAR_END','declaration_array',19,'p_declaration_array','parser.py',193),
  ('declaration_array_init -> VAR_START EQUALSIGN id RBRACKET TYPE_START type TYPE_END DIMENSIONS_START COUNT EQUALSIGN const RBRACKET dimensions DIMENSIONS_END VALUES_START values VALUES_END LBRACKET VAR_END','declaration_array_init',19,'p_declaration_array_init','parser.py',197),
  ('declaration_array_init -> VAR_START EQUALSIGN id CONST EQUALSIGN FALSE RBRACKET TYPE_START type TYPE_END DIMENSIONS_START COUNT EQUALSIGN const RBRACKET dimensions DIMENSIONS_END VALUES_START values VALUES_END LBRACKET VAR_END','declaration_array_init',22,'p_declaration_array_init','parser.py',198),
  ('declaration_array_const -> VAR_START EQUALSIGN id CONST EQUALSIGN TRUE RBRACKET TYPE_START type TYPE_END DIMENSIONS_START COUNT EQUALSIGN const RBRACKET dimensions DIMENSIONS_END VALUES_START values VALUES_END LBRACKET VAR_END','declaration_array_const',22,'p_declaration_array_const','parser.py',202),
  ('values -> values value','values',2,'p_values','parser.py',206),
  ('values -> value','values',1,'p_values','parser.py',207),
  ('value -> VALUE_START expression VALUE_END','value',3,'p_value','parser.py',214),
  ('dimensions -> dimensions dimension','dimensions',2,'p_dimensions','parser.py',218),
  ('dimensions -> dimension','dimensions',1,'p_dimensions','parser.py',219),
  ('dimension -> DIMENSION_START expression DIMENSION_END','dimension',3,'p_dimension','parser.py',226),
  ('type -> INT','type',1,'p_type','parser.py',230),
  ('type -> CELL','type',1,'p_type','parser.py',231),
  ('type -> BOOL','type',1,'p_type','parser.py',232),
  ('id -> ID','id',1,'p_id','parser.py',236),
  ('variables -> variables variable','variables',2,'p_variables','parser.py',240),
  ('variables -> variable','variables',1,'p_variables','parser.py',241),
  ('variable -> VAR_START NAME EQUALSIGN id VAR_END','variable',5,'p_variable','parser.py',248),
  ('variable -> VAR_START NAME EQUALSIGN id RBRACKET DIM_START indexes DIM_END LBRACKET VAR_END','variable',10,'p_variable','parser.py',249),
  ('variable -> empty','variable',1,'p_variable','parser.py',250),
  ('indexes -> indexes index','indexes',2,'p_indexes','parser.py',259),
  ('indexes -> index','indexes',1,'p_indexes','parser.py',260),
  ('index -> INDEX_START expression INDEX_END','index',3,'p_index','parser.py',267),
  ('expressions -> expressions expression','expressions',2,'p_expressions','parser.py',271),
  ('expressions -> expression','expressions',1,'p_expressions','parser.py',272),
  ('expression -> variable','expression',1,'p_expression','parser.py',279),
  ('expression -> const','expression',1,'p_expression','parser.py',280),
  ('expression -> math','expression',1,'p_expression','parser.py',281),
  ('expression -> empty','expression',1,'p_expression','parser.py',282),
  ('expression -> senddrons','expression',1,'p_expression','parser.py',283),
  ('const -> TRUE','const',1,'p_const','parser.py',287),
  ('const -> FALSE','const',1,'p_const','parser.py',288),
  ('const -> NUMBER','const',1,'p_const','parser.py',289),
  ('const -> EMPTY','const',1,'p_const','parser.py',290),
  ('const -> WALL','const',1,'p_const','parser.py',291),
  ('const -> EXIT','const',1,'p_const','parser.py',292),
  ('const -> UNDEF','const',1,'p_const','parser.py',293),
  ('math -> ADD_START expressions ADD_END','math',3,'p_math','parser.py',297),
  ('math -> MUL_START expressions MUL_END','math',3,'p_math','parser.py',298),
  ('math -> SUB_START expressions SUB_END','math',3,'p_math','parser.py',299),
  ('math -> DIV_START expressions DIV_END','math',3,'p_math','parser.py',300),
  ('math -> OR_START expressions OR_END','math',3,'p_math','parser.py',301),
  ('math -> AND_START expressions AND_END','math',3,'p_math','parser.py',302),
  ('math -> MAX_START expressions MAX_END','math',3,'p_math','parser.py',303),
  ('math -> MIN_START expressions MIN_END','math',3,'p_math','parser.py',304),
  ('math -> EQ_START expressions EQ_END','math',3,'p_math','parser.py',305),
  ('math -> NOT_START expression NOT_END','math',3,'p_math','parser.py',306),
  ('senddrons -> SENDDRONS_START expression SENDDRONS_END','senddrons',3,'p_senddrons','parser.py',310),
  ('operator -> LEFT_START expression LEFT_END','operator',3,'p_operator','parser.py',314),
  ('operator -> RIGHT_START expression RIGHT_END','operator',3,'p_operator','parser.py',315),
  ('operator -> UP_START expression UP_END','operator',3,'p_operator','parser.py',316),
  ('operator -> DOWN_START expression DOWN_END','operator',3,'p_operator','parser.py',317),
  ('operator -> GETDRONSCOUNT_START variable GETDRONSCOUNT_END','operator',3,'p_operator','parser.py',318),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',326),
]
