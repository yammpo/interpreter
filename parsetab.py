
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD_END ADD_START AND_END AND_START ASSIGN_END ASSIGN_START BOOL CALL_END CALL_START CELL CHECK_END CHECK_START CONDITION_END CONDITION_START CONST COUNT DIMENSIONS_END DIMENSIONS_START DIMENSION_END DIMENSION_START DIM_END DIM_START DIV_END DIV_START DOWN_END DOWN_START DO_END DO_START EMPTY EQUALSIGN EQ_END EQ_START EXIT FALSE FUNC_END FUNC_START GETDRONSCOUNT_END GETDRONSCOUNT_START ID INDEX_END INDEX_START INT LBRACKET LEFT_END LEFT_START MAIN MAX_END MAX_START MIN_END MIN_START MUL_END MUL_START NAME NOT_END NOT_START NUMBER OR_END OR_START PROGRAM_END PROGRAM_START RBRACKET RIGHT_END RIGHT_START SENDDRONS_END SENDDRONS_START SUB_END SUB_START SWITCH_END SWITCH_START TO_END TO_START TRUE TYPE_END TYPE_START UNDEF UP_END UP_START VALUES_END VALUES_START VALUE_END VALUE_START VARDECLARATION_END VARDECLARATION_START VAR_END VAR_START WALL WHILE_END WHILE_STARTprogram : PROGRAM_START blocks PROGRAM_ENDblocks : blocks block\n\t\t| blockblock : vardeclaration\n\t\t| function\n\t\t| emptyfunction : FUNC_START NAME EQUALSIGN funcname RBRACKET statements FUNC_ENDstatements : statements statement\n\t\t| statementstatement : vardeclaration\n\t\t| assignment \n\t\t| while\n\t\t| switch\n\t\t| call\n\t\t| operator\n\t\t| emptyassignment : ASSIGN_START VALUE_START expression VALUE_END TO_START variables TO_END ASSIGN_ENDwhile : WHILE_START CHECK_START expression CHECK_END DO_START statements DO_END WHILE_ENDswitch : SWITCH_START conditions SWITCH_ENDconditions : conditions condition\n\t\t| conditioncondition : CONDITION_START CHECK_START expression CHECK_END DO_START statements DO_END CONDITION_END\n\t\t| emptycall : CALL_START funcname CALL_ENDfuncname : MAIN\n\t\t| IDvardeclaration : VARDECLARATION_START declarations VARDECLARATION_ENDdeclarations : declarations declaration\n\t\t| declarationdeclaration : VAR_START EQUALSIGN ID RBRACKET TYPE_START type TYPE_END LBRACKET VAR_END\n\t\t| emptytype : INT\n\t\t| CELL\n\t\t| BOOLvariables : variables variable\n\t\t| variablevariable : VAR_START NAME EQUALSIGN ID VAR_END\n\t\t| emptyexpressions : expressions expression\n\t\t| expressionexpression : variable\n\t\t| const\n\t\t| math\n\t\t| emptyconst : TRUE\n\t\t| FALSE\n\t\t| NUMBERmath : ADD_START expression expressions ADD_END\n\t\t| MUL_START expression expressions MUL_END\n\t\t| SUB_START expression expression SUB_END\n\t\t| DIV_START expression expression DIV_END\n\t\t| OR_START expression expressions OR_END\n\t\t| AND_START expression expressions AND_END\n\t\t| MAX_START expression expressions MAX_END\n\t\t| MIN_START expression expressions MIN_END\n\t\t| EQ_START expression expressions EQ_END\n\t\t| NOT_START expression NOT_ENDoperator : LEFT_START expression LEFT_END\n\t\t| RIGHT_START expression RIGHT_END\n\t\t| UP_START expression UP_END\n\t\t| DOWN_START expression DOWN_END\n\t\t| SENDDRONS_START expression SENDDRONS_END\n\t\t| GETDRONSCOUNT_START variable GETDRONSCOUNT_ENDempty : '
    
_lr_action_items = {'PROGRAM_START':([0,],[2,]),'$end':([1,10,],[0,-1,]),'VARDECLARATION_START':([2,3,4,5,6,7,11,17,26,28,29,30,31,32,33,34,35,36,51,52,88,91,92,104,105,106,107,108,127,142,143,148,149,150,],[8,8,-3,-4,-5,-6,-2,-27,8,8,-9,-10,-11,-12,-13,-14,-15,-16,-7,-8,-19,-24,-58,-59,-60,-61,-62,-63,8,8,8,8,-17,-18,]),'FUNC_START':([2,3,4,5,6,7,11,17,51,],[9,9,-3,-4,-5,-6,-2,-27,-7,]),'PROGRAM_END':([2,3,4,5,6,7,11,17,51,],[-64,10,-3,-4,-5,-6,-2,-27,-7,]),'VAR_START':([8,12,13,15,18,41,42,43,44,45,46,53,54,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,84,90,94,95,96,97,98,99,100,101,102,114,115,116,119,120,121,122,123,124,125,126,130,131,132,133,134,135,136,137,138,139,140,141,144,146,],[14,14,-29,-31,-28,65,65,65,65,65,65,65,65,-41,-42,-43,-38,-45,-46,-47,65,65,65,65,65,65,65,65,65,65,-38,65,65,65,65,65,65,65,65,65,65,-40,65,65,65,65,65,65,65,-57,-30,65,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,65,-36,-37,-35,]),'VARDECLARATION_END':([8,12,13,15,18,125,],[-64,17,-29,-31,-28,-30,]),'NAME':([9,65,],[16,93,]),'EQUALSIGN':([14,16,93,],[19,20,113,]),'FUNC_END':([17,26,28,29,30,31,32,33,34,35,36,52,88,91,92,104,105,106,107,108,149,150,],[-27,-64,51,-9,-10,-11,-12,-13,-14,-15,-16,-8,-19,-24,-58,-59,-60,-61,-62,-63,-17,-18,]),'ASSIGN_START':([17,26,28,29,30,31,32,33,34,35,36,52,88,91,92,104,105,106,107,108,127,142,143,148,149,150,],[-27,37,37,-9,-10,-11,-12,-13,-14,-15,-16,-8,-19,-24,-58,-59,-60,-61,-62,-63,37,37,37,37,-17,-18,]),'WHILE_START':([17,26,28,29,30,31,32,33,34,35,36,52,88,91,92,104,105,106,107,108,127,142,143,148,149,150,],[-27,38,38,-9,-10,-11,-12,-13,-14,-15,-16,-8,-19,-24,-58,-59,-60,-61,-62,-63,38,38,38,38,-17,-18,]),'SWITCH_START':([17,26,28,29,30,31,32,33,34,35,36,52,88,91,92,104,105,106,107,108,127,142,143,148,149,150,],[-27,39,39,-9,-10,-11,-12,-13,-14,-15,-16,-8,-19,-24,-58,-59,-60,-61,-62,-63,39,39,39,39,-17,-18,]),'CALL_START':([17,26,28,29,30,31,32,33,34,35,36,52,88,91,92,104,105,106,107,108,127,142,143,148,149,150,],[-27,40,40,-9,-10,-11,-12,-13,-14,-15,-16,-8,-19,-24,-58,-59,-60,-61,-62,-63,40,40,40,40,-17,-18,]),'LEFT_START':([17,26,28,29,30,31,32,33,34,35,36,52,88,91,92,104,105,106,107,108,127,142,143,148,149,150,],[-27,41,41,-9,-10,-11,-12,-13,-14,-15,-16,-8,-19,-24,-58,-59,-60,-61,-62,-63,41,41,41,41,-17,-18,]),'RIGHT_START':([17,26,28,29,30,31,32,33,34,35,36,52,88,91,92,104,105,106,107,108,127,142,143,148,149,150,],[-27,42,42,-9,-10,-11,-12,-13,-14,-15,-16,-8,-19,-24,-58,-59,-60,-61,-62,-63,42,42,42,42,-17,-18,]),'UP_START':([17,26,28,29,30,31,32,33,34,35,36,52,88,91,92,104,105,106,107,108,127,142,143,148,149,150,],[-27,43,43,-9,-10,-11,-12,-13,-14,-15,-16,-8,-19,-24,-58,-59,-60,-61,-62,-63,43,43,43,43,-17,-18,]),'DOWN_START':([17,26,28,29,30,31,32,33,34,35,36,52,88,91,92,104,105,106,107,108,127,142,143,148,149,150,],[-27,44,44,-9,-10,-11,-12,-13,-14,-15,-16,-8,-19,-24,-58,-59,-60,-61,-62,-63,44,44,44,44,-17,-18,]),'SENDDRONS_START':([17,26,28,29,30,31,32,33,34,35,36,52,88,91,92,104,105,106,107,108,127,142,143,148,149,150,],[-27,45,45,-9,-10,-11,-12,-13,-14,-15,-16,-8,-19,-24,-58,-59,-60,-61,-62,-63,45,45,45,45,-17,-18,]),'GETDRONSCOUNT_START':([17,26,28,29,30,31,32,33,34,35,36,52,88,91,92,104,105,106,107,108,127,142,143,148,149,150,],[-27,46,46,-9,-10,-11,-12,-13,-14,-15,-16,-8,-19,-24,-58,-59,-60,-61,-62,-63,46,46,46,46,-17,-18,]),'DO_END':([17,29,30,31,32,33,34,35,36,52,88,91,92,104,105,106,107,108,127,142,143,148,149,150,],[-27,-9,-10,-11,-12,-13,-14,-15,-16,-8,-19,-24,-58,-59,-60,-61,-62,-63,-64,147,-64,151,-17,-18,]),'ID':([19,20,40,113,],[21,24,24,129,]),'MAIN':([20,40,],[23,23,]),'RBRACKET':([21,22,23,24,],[25,26,-25,-26,]),'CALL_END':([23,24,59,],[-25,-26,91,]),'TYPE_START':([25,],[27,]),'INT':([27,],[48,]),'CELL':([27,],[49,]),'BOOL':([27,],[50,]),'VALUE_START':([37,],[53,]),'CHECK_START':([38,57,],[54,90,]),'CONDITION_START':([39,55,56,58,89,152,],[57,57,-21,-23,-20,-22,]),'SWITCH_END':([39,55,56,58,89,152,],[-64,88,-21,-23,-20,-22,]),'TRUE':([41,42,43,44,45,53,54,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,90,94,95,96,97,98,99,100,101,102,114,115,116,119,120,121,122,123,124,130,131,132,133,134,135,136,137,138,139,144,],[66,66,66,66,66,66,66,-41,-42,-43,-38,-45,-46,-47,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-40,66,66,66,66,66,66,66,-57,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'FALSE':([41,42,43,44,45,53,54,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,90,94,95,96,97,98,99,100,101,102,114,115,116,119,120,121,122,123,124,130,131,132,133,134,135,136,137,138,139,144,],[67,67,67,67,67,67,67,-41,-42,-43,-38,-45,-46,-47,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-40,67,67,67,67,67,67,67,-57,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'NUMBER':([41,42,43,44,45,53,54,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,90,94,95,96,97,98,99,100,101,102,114,115,116,119,120,121,122,123,124,130,131,132,133,134,135,136,137,138,139,144,],[68,68,68,68,68,68,68,-41,-42,-43,-38,-45,-46,-47,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-40,68,68,68,68,68,68,68,-57,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'ADD_START':([41,42,43,44,45,53,54,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,90,94,95,96,97,98,99,100,101,102,114,115,116,119,120,121,122,123,124,130,131,132,133,134,135,136,137,138,139,144,],[69,69,69,69,69,69,69,-41,-42,-43,-38,-45,-46,-47,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-40,69,69,69,69,69,69,69,-57,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'MUL_START':([41,42,43,44,45,53,54,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,90,94,95,96,97,98,99,100,101,102,114,115,116,119,120,121,122,123,124,130,131,132,133,134,135,136,137,138,139,144,],[70,70,70,70,70,70,70,-41,-42,-43,-38,-45,-46,-47,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-40,70,70,70,70,70,70,70,-57,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'SUB_START':([41,42,43,44,45,53,54,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,90,94,95,96,97,98,99,100,101,102,114,115,116,119,120,121,122,123,124,130,131,132,133,134,135,136,137,138,139,144,],[71,71,71,71,71,71,71,-41,-42,-43,-38,-45,-46,-47,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-40,71,71,71,71,71,71,71,-57,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'DIV_START':([41,42,43,44,45,53,54,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,90,94,95,96,97,98,99,100,101,102,114,115,116,119,120,121,122,123,124,130,131,132,133,134,135,136,137,138,139,144,],[72,72,72,72,72,72,72,-41,-42,-43,-38,-45,-46,-47,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-40,72,72,72,72,72,72,72,-57,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'OR_START':([41,42,43,44,45,53,54,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,90,94,95,96,97,98,99,100,101,102,114,115,116,119,120,121,122,123,124,130,131,132,133,134,135,136,137,138,139,144,],[73,73,73,73,73,73,73,-41,-42,-43,-38,-45,-46,-47,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-40,73,73,73,73,73,73,73,-57,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'AND_START':([41,42,43,44,45,53,54,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,90,94,95,96,97,98,99,100,101,102,114,115,116,119,120,121,122,123,124,130,131,132,133,134,135,136,137,138,139,144,],[74,74,74,74,74,74,74,-41,-42,-43,-38,-45,-46,-47,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-40,74,74,74,74,74,74,74,-57,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'MAX_START':([41,42,43,44,45,53,54,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,90,94,95,96,97,98,99,100,101,102,114,115,116,119,120,121,122,123,124,130,131,132,133,134,135,136,137,138,139,144,],[75,75,75,75,75,75,75,-41,-42,-43,-38,-45,-46,-47,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-40,75,75,75,75,75,75,75,-57,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'MIN_START':([41,42,43,44,45,53,54,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,90,94,95,96,97,98,99,100,101,102,114,115,116,119,120,121,122,123,124,130,131,132,133,134,135,136,137,138,139,144,],[76,76,76,76,76,76,76,-41,-42,-43,-38,-45,-46,-47,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-40,76,76,76,76,76,76,76,-57,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'EQ_START':([41,42,43,44,45,53,54,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,90,94,95,96,97,98,99,100,101,102,114,115,116,119,120,121,122,123,124,130,131,132,133,134,135,136,137,138,139,144,],[77,77,77,77,77,77,77,-41,-42,-43,-38,-45,-46,-47,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-40,77,77,77,77,77,77,77,-57,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'NOT_START':([41,42,43,44,45,53,54,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,90,94,95,96,97,98,99,100,101,102,114,115,116,119,120,121,122,123,124,130,131,132,133,134,135,136,137,138,139,144,],[78,78,78,78,78,78,78,-41,-42,-43,-38,-45,-46,-47,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-40,78,78,78,78,78,78,78,-57,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'LEFT_END':([41,60,61,62,63,64,66,67,68,124,131,132,133,134,135,136,137,138,139,144,],[-64,92,-41,-42,-43,-38,-45,-46,-47,-57,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'RIGHT_END':([42,61,62,63,64,66,67,68,79,124,131,132,133,134,135,136,137,138,139,144,],[-64,-41,-42,-43,-38,-45,-46,-47,104,-57,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'UP_END':([43,61,62,63,64,66,67,68,80,124,131,132,133,134,135,136,137,138,139,144,],[-64,-41,-42,-43,-38,-45,-46,-47,105,-57,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'DOWN_END':([44,61,62,63,64,66,67,68,81,124,131,132,133,134,135,136,137,138,139,144,],[-64,-41,-42,-43,-38,-45,-46,-47,106,-57,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'SENDDRONS_END':([45,61,62,63,64,66,67,68,82,124,131,132,133,134,135,136,137,138,139,144,],[-64,-41,-42,-43,-38,-45,-46,-47,107,-57,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'GETDRONSCOUNT_END':([46,83,84,144,],[-64,108,-38,-37,]),'TYPE_END':([47,48,49,50,],[85,-32,-33,-34,]),'VALUE_END':([53,61,62,63,64,66,67,68,86,124,131,132,133,134,135,136,137,138,139,144,],[-64,-41,-42,-43,-38,-45,-46,-47,110,-57,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'CHECK_END':([54,61,62,63,64,66,67,68,87,90,112,124,131,132,133,134,135,136,137,138,139,144,],[-64,-41,-42,-43,-38,-45,-46,-47,111,-64,128,-57,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'ADD_END':([61,62,63,64,66,67,68,69,94,114,115,124,130,131,132,133,134,135,136,137,138,139,144,],[-41,-42,-43,-38,-45,-46,-47,-64,-64,-40,131,-57,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'MUL_END':([61,62,63,64,66,67,68,70,95,114,116,124,130,131,132,133,134,135,136,137,138,139,144,],[-41,-42,-43,-38,-45,-46,-47,-64,-64,-40,132,-57,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'SUB_END':([61,62,63,64,66,67,68,71,96,117,124,131,132,133,134,135,136,137,138,139,144,],[-41,-42,-43,-38,-45,-46,-47,-64,-64,133,-57,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'DIV_END':([61,62,63,64,66,67,68,72,97,118,124,131,132,133,134,135,136,137,138,139,144,],[-41,-42,-43,-38,-45,-46,-47,-64,-64,134,-57,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'OR_END':([61,62,63,64,66,67,68,73,98,114,119,124,130,131,132,133,134,135,136,137,138,139,144,],[-41,-42,-43,-38,-45,-46,-47,-64,-64,-40,135,-57,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'AND_END':([61,62,63,64,66,67,68,74,99,114,120,124,130,131,132,133,134,135,136,137,138,139,144,],[-41,-42,-43,-38,-45,-46,-47,-64,-64,-40,136,-57,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'MAX_END':([61,62,63,64,66,67,68,75,100,114,121,124,130,131,132,133,134,135,136,137,138,139,144,],[-41,-42,-43,-38,-45,-46,-47,-64,-64,-40,137,-57,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'MIN_END':([61,62,63,64,66,67,68,76,101,114,122,124,130,131,132,133,134,135,136,137,138,139,144,],[-41,-42,-43,-38,-45,-46,-47,-64,-64,-40,138,-57,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'EQ_END':([61,62,63,64,66,67,68,77,102,114,123,124,130,131,132,133,134,135,136,137,138,139,144,],[-41,-42,-43,-38,-45,-46,-47,-64,-64,-40,139,-57,-39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'NOT_END':([61,62,63,64,66,67,68,78,103,124,131,132,133,134,135,136,137,138,139,144,],[-41,-42,-43,-38,-45,-46,-47,-64,124,-57,-48,-49,-50,-51,-52,-53,-54,-55,-56,-37,]),'TO_END':([84,126,140,141,144,146,],[-38,-64,145,-36,-37,-35,]),'LBRACKET':([85,],[109,]),'VAR_END':([109,129,],[125,144,]),'TO_START':([110,],[126,]),'DO_START':([111,128,],[127,143,]),'ASSIGN_END':([145,],[149,]),'WHILE_END':([147,],[150,]),'CONDITION_END':([151,],[152,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'blocks':([2,],[3,]),'block':([2,3,],[4,11,]),'vardeclaration':([2,3,26,28,127,142,143,148,],[5,5,30,30,30,30,30,30,]),'function':([2,3,],[6,6,]),'empty':([2,3,8,12,26,28,39,41,42,43,44,45,46,53,54,55,69,70,71,72,73,74,75,76,77,78,90,94,95,96,97,98,99,100,101,102,115,116,119,120,121,122,123,126,127,140,142,143,148,],[7,7,15,15,36,36,58,64,64,64,64,64,84,64,64,58,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,84,36,84,36,36,36,]),'declarations':([8,],[12,]),'declaration':([8,12,],[13,18,]),'funcname':([20,40,],[22,59,]),'statements':([26,127,143,],[28,142,148,]),'statement':([26,28,127,142,143,148,],[29,52,29,52,29,52,]),'assignment':([26,28,127,142,143,148,],[31,31,31,31,31,31,]),'while':([26,28,127,142,143,148,],[32,32,32,32,32,32,]),'switch':([26,28,127,142,143,148,],[33,33,33,33,33,33,]),'call':([26,28,127,142,143,148,],[34,34,34,34,34,34,]),'operator':([26,28,127,142,143,148,],[35,35,35,35,35,35,]),'type':([27,],[47,]),'conditions':([39,],[55,]),'condition':([39,55,],[56,89,]),'expression':([41,42,43,44,45,53,54,69,70,71,72,73,74,75,76,77,78,90,94,95,96,97,98,99,100,101,102,115,116,119,120,121,122,123,],[60,79,80,81,82,86,87,94,95,96,97,98,99,100,101,102,103,112,114,114,117,118,114,114,114,114,114,130,130,130,130,130,130,130,]),'variable':([41,42,43,44,45,46,53,54,69,70,71,72,73,74,75,76,77,78,90,94,95,96,97,98,99,100,101,102,115,116,119,120,121,122,123,126,140,],[61,61,61,61,61,83,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,141,146,]),'const':([41,42,43,44,45,53,54,69,70,71,72,73,74,75,76,77,78,90,94,95,96,97,98,99,100,101,102,115,116,119,120,121,122,123,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'math':([41,42,43,44,45,53,54,69,70,71,72,73,74,75,76,77,78,90,94,95,96,97,98,99,100,101,102,115,116,119,120,121,122,123,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'expressions':([94,95,98,99,100,101,102,],[115,116,119,120,121,122,123,]),'variables':([126,],[140,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM_START blocks PROGRAM_END','program',3,'p_program','parser.py',56),
  ('blocks -> blocks block','blocks',2,'p_blocks','parser.py',60),
  ('blocks -> block','blocks',1,'p_blocks','parser.py',61),
  ('block -> vardeclaration','block',1,'p_block','parser.py',68),
  ('block -> function','block',1,'p_block','parser.py',69),
  ('block -> empty','block',1,'p_block','parser.py',70),
  ('function -> FUNC_START NAME EQUALSIGN funcname RBRACKET statements FUNC_END','function',7,'p_function','parser.py',74),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',78),
  ('statements -> statement','statements',1,'p_statements','parser.py',79),
  ('statement -> vardeclaration','statement',1,'p_statement','parser.py',86),
  ('statement -> assignment','statement',1,'p_statement','parser.py',87),
  ('statement -> while','statement',1,'p_statement','parser.py',88),
  ('statement -> switch','statement',1,'p_statement','parser.py',89),
  ('statement -> call','statement',1,'p_statement','parser.py',90),
  ('statement -> operator','statement',1,'p_statement','parser.py',91),
  ('statement -> empty','statement',1,'p_statement','parser.py',92),
  ('assignment -> ASSIGN_START VALUE_START expression VALUE_END TO_START variables TO_END ASSIGN_END','assignment',8,'p_assignment','parser.py',97),
  ('while -> WHILE_START CHECK_START expression CHECK_END DO_START statements DO_END WHILE_END','while',8,'p_while','parser.py',101),
  ('switch -> SWITCH_START conditions SWITCH_END','switch',3,'p_switch','parser.py',107),
  ('conditions -> conditions condition','conditions',2,'p_conditions','parser.py',111),
  ('conditions -> condition','conditions',1,'p_conditions','parser.py',112),
  ('condition -> CONDITION_START CHECK_START expression CHECK_END DO_START statements DO_END CONDITION_END','condition',8,'p_condition','parser.py',119),
  ('condition -> empty','condition',1,'p_condition','parser.py',120),
  ('call -> CALL_START funcname CALL_END','call',3,'p_call','parser.py',127),
  ('funcname -> MAIN','funcname',1,'p_funcname','parser.py',131),
  ('funcname -> ID','funcname',1,'p_funcname','parser.py',132),
  ('vardeclaration -> VARDECLARATION_START declarations VARDECLARATION_END','vardeclaration',3,'p_vardeclaration','parser.py',136),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','parser.py',140),
  ('declarations -> declaration','declarations',1,'p_declarations','parser.py',141),
  ('declaration -> VAR_START EQUALSIGN ID RBRACKET TYPE_START type TYPE_END LBRACKET VAR_END','declaration',9,'p_declaration','parser.py',148),
  ('declaration -> empty','declaration',1,'p_declaration','parser.py',149),
  ('type -> INT','type',1,'p_type','parser.py',156),
  ('type -> CELL','type',1,'p_type','parser.py',157),
  ('type -> BOOL','type',1,'p_type','parser.py',158),
  ('variables -> variables variable','variables',2,'p_variables','parser.py',162),
  ('variables -> variable','variables',1,'p_variables','parser.py',163),
  ('variable -> VAR_START NAME EQUALSIGN ID VAR_END','variable',5,'p_variable','parser.py',170),
  ('variable -> empty','variable',1,'p_variable','parser.py',171),
  ('expressions -> expressions expression','expressions',2,'p_expressions','parser.py',178),
  ('expressions -> expression','expressions',1,'p_expressions','parser.py',179),
  ('expression -> variable','expression',1,'p_expression','parser.py',186),
  ('expression -> const','expression',1,'p_expression','parser.py',187),
  ('expression -> math','expression',1,'p_expression','parser.py',188),
  ('expression -> empty','expression',1,'p_expression','parser.py',189),
  ('const -> TRUE','const',1,'p_const','parser.py',193),
  ('const -> FALSE','const',1,'p_const','parser.py',194),
  ('const -> NUMBER','const',1,'p_const','parser.py',195),
  ('math -> ADD_START expression expressions ADD_END','math',4,'p_math','parser.py',199),
  ('math -> MUL_START expression expressions MUL_END','math',4,'p_math','parser.py',200),
  ('math -> SUB_START expression expression SUB_END','math',4,'p_math','parser.py',201),
  ('math -> DIV_START expression expression DIV_END','math',4,'p_math','parser.py',202),
  ('math -> OR_START expression expressions OR_END','math',4,'p_math','parser.py',203),
  ('math -> AND_START expression expressions AND_END','math',4,'p_math','parser.py',204),
  ('math -> MAX_START expression expressions MAX_END','math',4,'p_math','parser.py',205),
  ('math -> MIN_START expression expressions MIN_END','math',4,'p_math','parser.py',206),
  ('math -> EQ_START expression expressions EQ_END','math',4,'p_math','parser.py',207),
  ('math -> NOT_START expression NOT_END','math',3,'p_math','parser.py',208),
  ('operator -> LEFT_START expression LEFT_END','operator',3,'p_operator','parser.py',217),
  ('operator -> RIGHT_START expression RIGHT_END','operator',3,'p_operator','parser.py',218),
  ('operator -> UP_START expression UP_END','operator',3,'p_operator','parser.py',219),
  ('operator -> DOWN_START expression DOWN_END','operator',3,'p_operator','parser.py',220),
  ('operator -> SENDDRONS_START expression SENDDRONS_END','operator',3,'p_operator','parser.py',221),
  ('operator -> GETDRONSCOUNT_START variable GETDRONSCOUNT_END','operator',3,'p_operator','parser.py',222),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',230),
]
